import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

/**
 * Shared Map
 */
class SharedMap<K, V> {
    private local HashMap<K, V> map;

    public SharedMap() {
        this.map = new HashMap<K, V>();
    }

    public SharedMap(local Integer init_capacity) {
        this.map = new HashMap<K, V>(init_capacity);
    }

    public SharedMap(local Map<K, V> map) {
        this.map = new HashMap<K, V>(map);
    }

    public local HashMap<K, V> value() {
        return map;
    }

    public void put(local K key, local V value) {
        map.put(key, value);
    }

    public local V get(local K key) {
        return map.get(key);
    }

    public boolean containsKey(local K key) {
        return map.containsKey(key);
    }
}

restriction RMap for SharedMap {
    allows value;
    allows put;
    allows get;
    allows containsKey;
}

public class AntidoteTest2 {
    public static void main(local String[] args) {
        shared[RMap] SharedMap<String, Integer> map = new SharedMap<String, Integer>(10);
        map.put("key1", 1);
        assert (map.containsKey("key1"));
        assert ((Integer) map.get("key1") == 1);
        assert ((Integer) map.get("key2") == null);
    }
}