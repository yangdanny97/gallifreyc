# pth test script
#
# This file is a test script for pth (Polyglot Test Harness). It
# conforms to the following grammar.
#
#      ScriptFile   ::= CompilerTest+
#      CompilerTest ::= ExtClassName ["CmdLineArgs"] { FileTest [; FileTest]* }
#      FileTest     ::= CompilationUnits [Description] [FailureSet]
#  CompilationUnits ::= Filenames [, Filenames]*
#      Filenames    ::= Filename [Filename]*
#      Description  ::= LitString
#      FailureSet   ::= Failure [, Failure]*
#      Failure      ::= ( ErrorKind )
#                    |  ( ErrorKind, "RegExp" )
#                    |  ( "RegExp" )
#                    |  ( )
#      ErrorKind    :   one of, or a unique prefix of one of the following 
#                       strings: "Warning", "Internal Error", "I/O Error", 
#                       "Lexical Error", "Syntax Error", "Semantic Error"
#                       or "Post-compiler Error".
#      Filename     :   the name of a file. Is interpreted from the 
#                       directory where pth is run.
#      LitString    :   a literal string, enclosed in quotes.
#      RegExp       :   a regular expression, as in java.util.regex; 
#                       is always enclosed in quotes.
#      CmdLineArgs  :   additional command line args for the Polyglot 
#                       compiler; is always enclosed in quotes.

javac "-d java-out -cp ." {
    Shared.java;
    Unique.java;
    GenericKey.java;
    Frontend.java;
}

// old tests
gallifreyc.GallifreyExtensionInfo "-d out -classpath java-out:../../gallifrey-antidote/build/classes/java/test" {
    RefQualification1.gal;
    RefQualification2a.gal;
    RefQualification2b.gal;
    RefQualification3.gal;
    RefQualification4.gal (Semantic);
    RefQualification5.gal;
    RefQualification6.gal (Semantic);
    RefQualification7.gal;
    RefQualification8.gal;
    Interface1.gal;
    Interface2.gal;
    Interface3.gal;
    Interface4.gal;
    FullInterface.gal;
    Class1.gal;
    Restriction1.gal;
    Restriction2.gal;
    Restriction3.gal;
    InterfaceWithoutRefQualifiedTypes.gal;
    Shared1.gal;
}

// new tests
gallifreyc.GallifreyExtensionInfo "-d out -classpath java-out:../../gallifrey-antidote/build/classes/java/test" {
    TestFieldAssign.gal ClassC.gal;
    TestHoist.gal;
    TestInitializer.gal;
    TestInvalidAllows.gal (Semantic);
    TestInvalidFieldAssign.gal (Semantic);
    ClassC.gal TestInvalidMissingQualifierArg.gal (Semantic);
    ClassC.gal TestInvalidMissingQualifierField.gal (Semantic);
    TestInvalidNestedQualifier.gal (Semantic);
    TestInvalidRestrictionClass.gal (Semantic);
    TestInvalidRestrictionUnion.gal (Semantic);
    TestInvalidTransition.gal (Semantic);
    TestInvariantSubtyping.gal (Semantic);
    TestRewrite.gal;
    TestRewrite2.gal ClassC.gal;
    ClassC.gal TestInvalidRestrictedMethod.gal (Semantic);
    ClassC.gal TestInvalidSharedFieldAccess.gal (Semantic);
}
