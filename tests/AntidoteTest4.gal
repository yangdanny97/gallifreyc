restriction RCounterA for Counter {
    allows increment;
    allows value;
}

restriction RCounterB for Counter {
    allows decrement;
    allows value;
}

restriction RCounterC = RCounterA | RCounterB;

public class AntidoteTest4 {

    public static void increment(shared[RCounterC] Counter x) {
        transition(x, RCounterC::RCounterA);
        match_restriction x with
        |shared[RCounterC::RCounterA] Counter x1 -> {
            x1.increment(1);
        }
        |shared[RCounterC::RCounterB] Counter x2 -> {}
    }
    
    public static void decrement(shared[RCounterC] Counter x) {
        transition(x, RCounterC::RCounterB);
        match_restriction x with
        |shared[RCounterC::RCounterA] Counter x1 -> {}
        |shared[RCounterC::RCounterB] Counter x2 -> {
            x2.decrement(1);
        }
    }
    
    public static void main(String[] args) {
        shared[RCounterC] Counter counter = new Counter(0);
        Integer count;
        for (int i = 1; i <= 10; i++) {
            AntidoteTest4.increment(counter);
            match_restriction counter with
            |shared[RCounterC::RCounterA] Counter c1 -> {
                count = c1.value();
                assert(count == i);
            }
            |shared[RCounterC::RCounterB] Counter c2 -> {
                count = c2.value();
                assert(count == i);
            }
        }
        for (int i = 1; i <= 10; i++) {
            AntidoteTest4.decrement(counter);
            match_restriction counter with
            |shared[RCounterC::RCounterA] Counter c1 -> {
                count = c1.value();
                assert(10 - count == i);
            }
            |shared[RCounterC::RCounterB] Counter c2 -> {
                count = c2.value();
                assert(10 - count == i);
            }
        }
        System.out.println("Success!");
    }
}