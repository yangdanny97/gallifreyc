restriction RCounter1 for Counter {
    allows increment;
    allows value;
}

restriction RCounter2 for Counter {
    allows decrement;
    allows value;
}

restriction RCounter3 = RCounter1 | RCounter2;

public class AntidoteTest4 {

    public static void increment(shared[RCounter3] Counter x) {
        transition(x, RCounter3::RCounter1);
        match_restriction x with
        |shared[RCounter3::RCounter1] Counter x1 -> {
            x1.increment(1);
        }
        |shared[RCounter3::RCounter2] Counter x2 -> {}
    }
    
    public static void decrement(shared[RCounter3] Counter x) {
        transition(x, RCounter3::RCounter2);
        match_restriction x with
        |shared[RCounter3::RCounter1] Counter x1 -> {}
        |shared[RCounter3::RCounter2] Counter x2 -> {
            x2.decrement(1);
        }
    }
    
    public static void main(local String[] args) {
        shared[RCounter3] Counter counter = new Counter(0);
        local Integer count;
        for (int i = 1; i <= 10; i++) {
            AntidoteTest4.increment(counter);
            match_restriction counter with
            |shared[RCounter3::RCounter1] Counter c1 -> {
                count = c1.value();
                assert(count == i);
            }
            |shared[RCounter3::RCounter2] Counter c2 -> {
                count = c2.value();
                assert(count == i);
            }
        }
        for (int i = 1; i <= 10; i++) {
            AntidoteTest4.decrement(counter);
            match_restriction counter with
            |shared[RCounter3::RCounter1] Counter c1 -> {
                count = c1.value();
                assert(10 - count == i);
            }
            |shared[RCounter3::RCounter2] Counter c2 -> {
                count = c2.value();
                assert(10 - count == i);
            }
        }
        System.out.println("Success!");
    }
}