// Assumes polyglot.jar is in classpath
include "polyglot/ext/jl7/parse/jl7.ppg"

package gallifreyc.parse;

import gallifreyc.types.GallifreyTypeSystem;
import gallifreyc.ast.GallifreyNodeFactory;
import gallifreyc.ast.*;
import polyglot.parse.Name;
import polyglot.parse.VarDeclarator;

parser Grm extends polyglot.ext.jl7.parse.Grm {:
    public final GallifreyTypeSystem ts;
    public final GallifreyNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (GallifreyTypeSystem) t;
        nf = (GallifreyNodeFactory) n;
    }
:};

terminal Token ALLOWS;
terminal Token BRANCH;
terminal Token CONTINGENT;
terminal Token DELETE;
terminal Token ENSURES;
terminal Token MATCH_RESTRICTION;
terminal Token MERGE;
terminal Token REQUIRES;
terminal Token RESTRICTION;
terminal Token SHARED;
terminal Token TEST;
terminal Token THREAD;
terminal Token TRANSITION;
terminal Token WHEN;
terminal Token WHERE;
terminal Token WITH;
terminal Token ARROW;
terminal Token PRESERVES;
terminal Token CONSUMES;
terminal Token ISOLATED;
terminal Token AS;

non terminal PreCondition pre_condition_opt;
non terminal PostCondition post_condition_opt;

// Restrictions
non terminal TopLevelDecl restriction_declaration;
non terminal List<Id> restriction_variant;
non terminal RestrictionBody restriction_body;
non terminal List<ClassMember> restriction_body_declarations_opt;
non terminal List<ClassMember> restriction_body_declarations;
non terminal List<ClassMember> restriction_body_declaration;
non terminal AllowsStmt allows_stmt;
non terminal MethodDecl test_declaration;
non terminal MethodDecl test_header;
non terminal RestrictionId restriction_id;
non terminal MatchBranch match_branch;
non terminal List<MatchBranch> match_branch_list;
non terminal MergeDecl merge_decl;

// Unimplemented keywords: where, collection/next, thread, branch, peek, abort, commit

start with goal;

extend class_or_interface_type ::= 
    SHARED:a LBRACK restriction_id:b RBRACK:c class_or_interface_type:t
        {: 
            RefQualification r = parser.nf.SharedRef(parser.pos(a, c), b); 
            RESULT = parser.nf.RefQualifiedTypeNode(parser.pos(a, t), r, t);
        :}
;

override formal_parameter ::=
    modifiers_or_annotations_opt:a type:b variable_declarator_id:c {:
        RESULT = parser.nf.Formal(parser.pos(b, c, c), a.flags(), a.annotations(),
            parser.array(b, c.dims), c.name); 
                                                                   :}
 |  modifiers_or_annotations_opt:a type:b ELLIPSIS IDENTIFIER:d {:                                                      
        RESULT = parser.nf.Formal(parser.pos(b, d, d), a.flags(), a.annotations(), 
            parser.nf.ArrayTypeNode(parser.pos(b), b), parser.nf.Id(parser.pos(d), d.getIdentifier()), true);
        
    :}
 |  modifiers_or_annotations_opt:a PRESERVES:l LT IDENTIFIER:b GT type:t ELLIPSIS IDENTIFIER:d {:    
        RefQualification r = parser.nf.LocalRef(parser.pos(l), b.getIdentifier()); 
        TypeNode tn = parser.nf.ArrayTypeNode(parser.pos(l, t), parser.nf.RefQualifiedTypeNode(parser.pos(l, t), r, t));                                                  
        RESULT = parser.nf.Formal(parser.pos(l, d, d), a.flags(), a.annotations(), 
            tn, parser.nf.Id(parser.pos(d), d.getIdentifier()), true);
        
    :}
 |  modifiers_or_annotations_opt:a PRESERVES:l LT IDENTIFIER:b GT type:t variable_declarator_id:c {:
        RefQualification r = parser.nf.LocalRef(parser.pos(l), b.getIdentifier()); 
        RefQualifiedTypeNode tn = parser.nf.RefQualifiedTypeNode(parser.pos(l, t), r, t);
        RESULT = parser.nf.Formal(parser.pos(l, c), a.flags(), a.annotations(), parser.array(tn, c.dims), c.name); 
    :}
 |  modifiers_or_annotations_opt:a CONSUMES:l LT IDENTIFIER:b GT type:t ELLIPSIS IDENTIFIER:d {:    
        RefQualification r = parser.nf.LocalRef(parser.pos(l), b.getIdentifier()); 
        TypeNode tn = parser.nf.ArrayTypeNode(parser.pos(l, t), parser.nf.RefQualifiedTypeNode(parser.pos(l, t), r, t));                                                  
        RESULT = parser.nf.Formal(parser.pos(l, d, d), a.flags(), a.annotations(), 
            tn, parser.nf.Id(parser.pos(d), d.getIdentifier()), true);
        
    :}
 |  modifiers_or_annotations_opt:a CONSUMES:l LT IDENTIFIER:b GT type:t variable_declarator_id:c {:
        RefQualification r = parser.nf.LocalRef(parser.pos(l), b.getIdentifier()); 
        RefQualifiedTypeNode tn = parser.nf.RefQualifiedTypeNode(parser.pos(l, t), r, t);
        RESULT = parser.nf.Formal(parser.pos(l, c), a.flags(), a.annotations(), parser.array(tn, c.dims), c.name); 
    :}
;

extend array_type ::= SHARED:a LBRACK restriction_id:b RBRACK:c array_type:t
        {: 
            RefQualification r = parser.nf.SharedRef(parser.pos(a, c), b); 
            RESULT = parser.nf.RefQualifiedTypeNode(parser.pos(a, t), r, t);
        :}
;

restriction_id ::=
	IDENTIFIER:a {: 
		RESULT = parser.nf.RestrictionId(
			parser.pos(a),
			null,
			parser.nf.Id(parser.pos(a), a.getIdentifier()),
			false); :}
	| MULT COLON COLON IDENTIFIER:a {: 
		RESULT = parser.nf.RestrictionId(
			parser.pos(a),
			null,
			parser.nf.Id(parser.pos(a), a.getIdentifier()),
			true); :}
	| IDENTIFIER:a COLON COLON IDENTIFIER:b {: 
		RESULT = parser.nf.RestrictionId(
			parser.pos(a),
			parser.nf.Id(parser.pos(a), a.getIdentifier()),
			parser.nf.Id(parser.pos(b), b.getIdentifier()),
			false); :}
;

// Pre/post conditions on method declarations in interfaces
override abstract_method_declaration ::=
    // MethodDecl
    method_header:a pre_condition_opt:b post_condition_opt:c SEMICOLON
		{: RESULT = parser.nf.MethodDecl(a.position(), a, b, c); :}
;

pre_condition_opt ::=
    // PreCondition
    {: RESULT = null; :}
    | REQUIRES:a expression:b
    {: RESULT = parser.nf.PreCondition(parser.pos(a, b), b); :}
;

post_condition_opt ::=
    // PostCondition
    {: RESULT = null; :}
    | ENSURES:a expression:b
    {: RESULT = parser.nf.PostCondition(parser.pos(a, b), b); :}
;

// Add Restrictions
override type_declarations ::=
    type_declaration:a {:
       List<TopLevelDecl> l = new LinkedList<>();
       if (a != null) l.add(a);
       RESULT = l; :}
 | restriction_declaration:a {:
       List<TopLevelDecl> l = new LinkedList<>();
       if (a != null) l.add(a);
       RESULT = l; :}
 |  type_declarations:a type_declaration:b {:
      RESULT = a;
      if (b != null) a.add(b); :}
 |  type_declarations:a restriction_declaration:b {:
      RESULT = a;
      if (b != null) a.add(b); :}
;

restriction_declaration ::=
    // RestrictionDecl
    RESTRICTION:a IDENTIFIER:b FOR class_or_interface_type:c restriction_body:d
	    {: RESULT = parser.nf.RestrictionDecl(parser.pos(a, d),
	                                          parser.nf.Id(parser.pos(b), b.getIdentifier()),
	                                          c, d); :}
	//Restriction Union Decl
   	| RESTRICTION:a IDENTIFIER:b EQ restriction_variant:u 
   		{: RESULT = parser.nf.RestrictionUnionDecl(
   				parser.pos(a, u), parser.nf.Id(parser.pos(b), b.getIdentifier()), u
   			);
   		 :}
;

restriction_variant ::=
	IDENTIFIER:a OR IDENTIFIER:b
		{: 
			List<Id> l = new ArrayList<>();
			l.add(parser.nf.Id(parser.pos(a), a.getIdentifier()));
			l.add(parser.nf.Id(parser.pos(b), b.getIdentifier()));
			RESULT = l; 
		:}
| restriction_variant:a OR IDENTIFIER:b
		{:
			a.add(parser.nf.Id(parser.pos(b), b.getIdentifier()));
			RESULT = a; 
		:}
;

restriction_body ::=
    // RestrictionBody
    LBRACE:a restriction_body_declarations_opt:b RBRACE:c
    	{: RESULT = parser.nf.RestrictionBody(parser.pos(a, c), b); :}
;

restriction_body_declarations_opt ::=
   	{: RESULT = new LinkedList<ClassMember>(); :}
    | restriction_body_declarations:a
    {: RESULT = a; :}
;

restriction_body_declarations ::=
    restriction_body_declaration:a
	    {: RESULT = a; :}
	| restriction_body_declarations:a restriction_body_declaration:b
		{:
		 RESULT = a;
		 a.addAll(b);
		 :}
;

restriction_body_declaration ::=
    SEMICOLON
		{:
		 List<ClassMember> l = new LinkedList<>();
		 RESULT = l; :}
    | allows_stmt:a SEMICOLON
	    {:
	     List<ClassMember> l = new LinkedList<>();
	     l.add(a);
	     RESULT = l; :}
	| test_declaration:a
		{:
		 List<ClassMember> l = new LinkedList<>();
		 l.add(a);
		 RESULT = l; :}
    | merge_decl:a
         {:
         List<ClassMember> l = new LinkedList<>();
         l.add(a);
         RESULT = l; :}
;

merge_decl ::=
    MERGE:a LPAREN IDENTIFIER:b LPAREN formal_parameter_list_opt:c RPAREN COMMA IDENTIFIER:d LPAREN formal_parameter_list_opt:e RPAREN RPAREN block:f 
    {: RESULT = parser.nf.MergeDecl(parser.pos(a,f), parser.nf.Id(parser.pos(b), b.getIdentifier()), c, 
        parser.nf.Id(parser.pos(d), d.getIdentifier()), e, f); :}
;

allows_stmt ::=
    // Node
    ALLOWS:a IDENTIFIER:b
    {: RESULT = parser.nf.AllowsStmt(parser.pos(a, b),
                                     parser.nf.Id(parser.pos(b), b.getIdentifier())); :}
	| ALLOWS:a IDENTIFIER:b CONTINGENT IDENTIFIER:c
	{: RESULT = parser.nf.AllowsStmt(parser.pos(a, b),
	                                 parser.nf.Id(parser.pos(b), b.getIdentifier()),
	                                 parser.nf.Id(parser.pos(c), c.getIdentifier())); :}
    | ALLOWS:a AS TEST IDENTIFIER:b
    {: RESULT = parser.nf.AllowsStmt(parser.pos(a, b),
                                     parser.nf.Id(parser.pos(b), b.getIdentifier()), true); :}
    | ALLOWS:a AS TEST IDENTIFIER:b CONTINGENT IDENTIFIER:c
    {: RESULT = parser.nf.AllowsStmt(parser.pos(a, b),
                                     parser.nf.Id(parser.pos(b), b.getIdentifier()),
                                     parser.nf.Id(parser.pos(c), c.getIdentifier()), true); :}
;

// tests in restrictions

test_declaration ::=
    // MethodDecl
    test_header:a method_body:b
	{: RESULT = (MethodDecl) a.body(b); :}
;

test_header ::=
    // MethodDecl
    modifiers_or_annotations_opt:a TEST:b IDENTIFIER:c LPAREN
    formal_parameter_list_opt:d RPAREN:g throws_opt:f
    {: 
    	RESULT = parser.nf.MethodDecl(parser.pos(b, g, c), a,
                                     parser.nf.CanonicalTypeNode(parser.pos(b),
                                                                 parser.ts.Boolean()),
                                     parser.nf.Id(parser.pos(c), c.getIdentifier()),
                                     d, f, null, true); 
    :}
;

match_branch ::=
	OR type:a variable_declarator_id:b ARROW block:d {:
		LocalDecl ld = parser.nf.LocalDecl(parser.pos(a,b), Flags.NONE, a, b.name()); 
		RESULT = parser.nf.MatchBranch(parser.pos(a, d), ld, d); 
	:}
;

match_branch_list ::=
	match_branch:a match_branch:b {:
		List<MatchBranch> br = new ArrayList<>();
		br.add(a);
		br.add(b);
		RESULT = br;
	:}
|   match_branch_list:a match_branch:b {:
		a.add(b);
		RESULT = a;
	:}
;

extend statement ::=
	TRANSITION:s LPAREN expression:a COMMA restriction_id:b RPAREN
	{: RESULT = parser.nf.Transition(parser.pos(s,b), a, b); :}
|   MATCH_RESTRICTION:s expression:a WITH match_branch_list:b 
	{: RESULT = parser.nf.MatchRestriction(parser.pos(s,b), a, b); :}
|   WHEN:s LPAREN expression:a RPAREN statement:b
    {: RESULT = parser.nf.WhenStmt(parser.pos(s,b), a, b); :}
;

override catch_clause ::= CATCH:n LPAREN modifiers_or_annotations_opt:a catch_type:b IDENTIFIER:c RPAREN block:d {:                                              
    Formal f = parser.nf.Formal(parser.pos(b, c, c), a.flags(), a.annotations(),
        parser.nf.RefQualifiedTypeNode(
            parser.pos(b), 
            parser.nf.LocalRef(parser.pos(b)), 
            parser.nf.AmbUnionType(parser.pos(b), b)
        ),
        parser.nf.Id(parser.pos(c), c.getIdentifier()));
    if (b.size() > 1)
        RESULT = parser.nf.MultiCatch(parser.pos(n, d), f, b, d); 
    else
        RESULT = parser.nf.Catch(parser.pos(n, d), f, d); 
:}
;

extend method_header ::=
    modifiers_or_annotations_opt:a ISOLATED:q type:b IDENTIFIER:d LPAREN formal_parameter_list_opt:e RPAREN dims_opt:g throws_opt:h {:
      RefQualification r = parser.nf.IsolatedRef(parser.pos(q)); 
      TypeNode tn = parser.nf.RefQualifiedTypeNode(parser.pos(q, b), r, b);
      RESULT = parser.nf.MethodDecl(parser.pos(q, g, d), a.flags(), a.annotations(), parser.array(tn, g.intValue()), parser.nf.Id(parser.pos(d), d.getIdentifier()), e, h, null, new LinkedList<ParamTypeNode>(), parser.javadoc(a.position(), parser.pos(b))); 
    :}
 |  modifiers_or_annotations_opt:a LT:b type_parameter_list_1:c ISOLATED:q type:d IDENTIFIER:i LPAREN formal_parameter_list_opt:e RPAREN dims_opt:g throws_opt:h {:
      RefQualification r = parser.nf.IsolatedRef(parser.pos(q)); 
      TypeNode tn = parser.nf.RefQualifiedTypeNode(parser.pos(q, d), r, d);
      RESULT = parser.nf.MethodDecl(parser.pos(q, g, i), a.flags(), a.annotations(), parser.array(tn, g.intValue()), parser.nf.Id(parser.pos(i), i.getIdentifier()), e, h, null, c, parser.javadoc(a.position(), parser.pos(b))); 
    :}
;
